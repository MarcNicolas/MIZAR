{"name":"MIZAR (Module for Interactive visualiZation from Astronomical Repositories)","tagline":"Contains the module for Sitools2 using GlobWeb","body":"### Welcome to MIZAR ###\r\n![](http://raw.githubusercontent.com/SITools2/RTWeb3D/gh-pages/images/logo.png)\r\nMost of scientific archives in astronomy provide an access to their data from a web interface. The way to search for users is usually a query form. The response is then a tabular format. MIZAR (Module for Interactive visualiZation from Astronomical Repositories) provides an alternative access to data based on a spatial distribution.<br/><br/>\r\nThe benefits of this representation are many. First there is the abability to superimpose all observations coming from various scientific archives on a single map. Then, for each layer is possible to tune the layer transparency to check that data on other layers coincide. Finally, it is easier using this representation to give inputs on services based on a selection on the map.<br/><br/>\r\nMIZAR is also a JavaScript API that makes able its control by developers from a simple web page. However, in this distribution, we bring out the client for end users.\r\n\r\n#### 1 - Architecture ####\r\n![](http://raw.githubusercontent.com/SITools2/RTWeb3D/gh-pages/images/architecture.png)\r\nMIZAR is based on a client/server architecture using SITools2. The data exchange format between the client and the server is the GeoJSON format. The server has several responsabilities :\r\n* publishing the API so that the client discovers the parameters to request\r\n* wrapping the GeoJSON request into another protocol (Simple Image Access Protocol, ...) for querying an external server \r\n* Filtering the response from the external server so that the response only returns the spatial query that is asked by the client\r\n* Caching the result\r\n\r\n#### 2 - JavaScript API ####\r\n##### 2.1 - Architecture #####\r\nMIZAR can also be controled by its JavaScript API thanks to [GlobeWeb](http://github.com/TPZF/GlobWeb). Here is the global architecture of GlobeWeb:\r\n![](http://raw.githubusercontent.com/SITools2/RTWeb3D/gh-pages/images/architecture_globeweb.png)\r\n<br/>\r\nIn addition, GlobeWeb can be also used for displaying data on the Earth :\r\n![](http://raw.githubusercontent.com/SITools2/RTWeb3D/gh-pages/images/architecture_globeweb_2.png) \r\n##### 2.2 - Example #####\r\nAs below, an example to embed MIZAR in a [web page](http://voparis-sitools.obspm.fr/sitools/client-user/js/modules/mizarModule/app/examples/SiTools.html) :\r\n`\r\n\trequire(['../externals/GlobWeb/src/AstroWeb'], function (AstroWeb) \r\n\t{\t\r\n\t\t// Init globe\r\n\t\t// - canvas: Id of canvas HTML element\r\n\t\t// - continuousRendering: Boolean defining that rendering will be done continuously\r\n\t\tvar globe = new AstroWeb.Globe({\r\n\t\t\tcanvas: \"GlobWebCanvas\",\r\n\t\t\tcontinuousRendering: true\r\n\t\t});\r\n\t\t\r\n\t\t// Create the navigation object to contol the camera\r\n                var optionsNav = {\r\n                        inertia: true\r\n                };\r\n\r\n\t\tvar astroNavigator = new AstroWeb.AstroNavigation(globe, optionsNav);\r\n\t\t\r\n\t\t// Create the object to show the statistic of AstroWeb\r\n\t\t// - element: Id of statistic HTML element\r\n\t\t// - verbose: If true, detailed information will be shown\r\n\t\tnew AstroWeb.Stats(globe,{element: \"fps\", verbose: true});\r\n\t\r\n\t\t// Set background layer\r\n\t\t// - baseUrl: Url to background images provider in HEALPix format\r\n\t\t//\t\tNote: must pass by proxy due to Cross-domain resource sharing issue\r\n\t\t//\t\t\t  For more details see: https://developer.mozilla.org/en-US/docs/HTTP_access_control\r\n\t\tvar cdsLayer = new AstroWeb.HEALPixLayer( { baseUrl: \"http://alasky.u-strasbg.fr/DssColor/\"} );///sitools/Alasky\r\n\t\tglobe.setBaseImagery( cdsLayer );\r\n\r\n\t\t// Define rendering options for OpenSearch layer\r\n\t\t// - fillColor: Color of features\r\n\t\t// - iconUrl: Url of image for texture\r\n\t\tvar layerStyle = new AstroWeb.FeatureStyle({ \r\n\t\t\tfillColor: [255, 204, 0,06, 1.],\r\n\t\t\ticonUrl: \"../css/images/star.png\"\r\n\t\t});\r\n\r\n\t\t// OpenSearch options\r\n\t\t// - serviceUrl: Url of the service providing OpenSearch data(necessary option)\r\n\t\t// - minOrder: Starting HEALPix order for OpenSearch requests\r\n\t\t// - visible: Visibility of layer\r\n\t\t// - style: Rendering style of layer\r\n\t\tvar options = {\r\n\t\t\tserviceUrl: \"/sitools/exoplanet\",\r\n\t\t\tminOrder: 3,\r\n\t\t\tvisible: false,\r\n\t\t\tstyle: layerStyle,\r\n\t\t\tcoordSystemRequired: true\r\n\t\t};\r\n\r\n\t\t// Create OpenSearch layer with choosen options\r\n\t\tvar openSearchLayer = new AstroWeb.OpenSearchLayer( options );\r\n\r\n\t\t// Add layer to the globe\r\n\t\tglobe.addLayer( openSearchLayer );\r\n\r\n\t\t// Zoom to point of interest event\r\n\t\t$('li.poi').click( function(event) {\r\n\t\t\tvar ra = parseFloat($(this).attr('data-ra'));\r\n\t\t\tvar dec = parseFloat($(this).attr('data-dec'));\r\n\t\t\t// Call zoomTo animation function\r\n\t\t\t// with arguments: equatorialPosition in degrees, zooming field of view in degrees, duration in ms\r\n\t\t\tastroNavigator.zoomTo( [ra, dec], 2., 3000 );\r\n\t\t});\r\n\r\n\t\t// OpenSearch layer visibility checkbox event\r\n\t\t$('#openSearchLayer').click( function(event) {\r\n\t\t\topenSearchLayer.visible( $(this).is(':checked') );\r\n\t\t});\r\n\t});\r\n\r\n`\r\n\r\n#### 3 - Download ####\r\n[Installeur de MIZAR-1.0](https://github.com/SITools2/RTWeb3D/releases/download/1.0/MIZAR-1.0-install.jar)\r\n\r\n","google":"UA-49385757-1","note":"Don't delete this file! It's used internally to help with page regeneration."}